// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/password/v1/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("alpacalabs/password/v1/api.proto", fileDescriptor_9cb87ca0f9d9da59) }

var fileDescriptor_9cb87ca0f9d9da59 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x4d, 0x05, 0x17, 0x03, 0x2a, 0xcc, 0xa2, 0x8b, 0xac, 0xc4, 0x95, 0x0a, 0x99, 0x61,
	0xf4, 0x04, 0x8d, 0xe0, 0xaa, 0x8b, 0xd0, 0x42, 0x16, 0x52, 0x08, 0x93, 0xc9, 0x6b, 0x0d, 0xa4,
	0xbe, 0xe9, 0xcc, 0x34, 0xc1, 0xeb, 0xb8, 0xd3, 0xa3, 0x78, 0x15, 0x2f, 0x21, 0x49, 0x1d, 0xa2,
	0xd0, 0x40, 0xd6, 0xef, 0xfb, 0xfe, 0xff, 0xf1, 0x93, 0x2b, 0x59, 0x69, 0xa9, 0x64, 0x25, 0x73,
	0xcb, 0xb5, 0xb4, 0xb6, 0x41, 0x53, 0xf0, 0x5a, 0x70, 0xa9, 0x4b, 0xa6, 0x0d, 0x3a, 0xa4, 0xd3,
	0x9e, 0x60, 0x9e, 0x60, 0xb5, 0x08, 0xc5, 0xb0, 0x99, 0x59, 0x27, 0x8d, 0xcb, 0x0c, 0x58, 0x70,
	0xd9, 0xba, 0xc2, 0xe6, 0x10, 0x15, 0xde, 0x0c, 0x28, 0x35, 0x98, 0x72, 0xfd, 0x96, 0x29, 0x2c,
	0xe0, 0x40, 0xde, 0x7f, 0x07, 0xe4, 0x32, 0xf9, 0x25, 0x96, 0x60, 0xea, 0x52, 0x01, 0xdd, 0x91,
	0x8b, 0x65, 0x9b, 0xbb, 0x68, 0x63, 0x9f, 0x2a, 0x6c, 0x68, 0xc4, 0x8e, 0xff, 0xc6, 0xfe, 0x73,
	0x0b, 0xd8, 0xed, 0xc1, 0xba, 0x90, 0x8d, 0xc5, 0xad, 0xc6, 0x57, 0x0b, 0xd7, 0x27, 0x14, 0x08,
	0x49, 0xbb, 0xdf, 0x1e, 0xb1, 0x00, 0x7a, 0x3b, 0xe4, 0xf7, 0x8c, 0xaf, 0xba, 0x1b, 0x83, 0xfa,
	0x9a, 0xf8, 0x23, 0x20, 0xa1, 0xc2, 0xed, 0x80, 0x13, 0x9f, 0xfb, 0x25, 0x92, 0x76, 0x9b, 0x24,
	0x78, 0x8e, 0x37, 0xa5, 0x7b, 0xd9, 0xe7, 0x4c, 0xe1, 0x96, 0xcf, 0x3a, 0x67, 0xde, 0x4d, 0xda,
	0x9e, 0x0d, 0x68, 0x8c, 0xbc, 0x1d, 0x6d, 0x90, 0x1f, 0xdf, 0xfc, 0x7d, 0x72, 0x3a, 0x9b, 0x27,
	0x9f, 0x93, 0x69, 0xef, 0x33, 0x5f, 0xc3, 0x52, 0xf1, 0xf5, 0xf7, 0xb0, 0xf2, 0x87, 0x55, 0x2a,
	0xf2, 0xb3, 0xae, 0xe5, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf0, 0xe8, 0x1f, 0x9a, 0x39, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PasswordServiceClient is the client API for PasswordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PasswordServiceClient interface {
	// initiate the password reset flow by providing an account identifier,
	// which can be a username, email, or phone number.
	// the account's primary email address will be emailed w/ the reset code.
	StartResetFlow(ctx context.Context, in *StartResetFlowRequest, opts ...grpc.CallOption) (*StartResetFlowResponse, error)
	// complete the password reset flow by sending the reset code, the account id, and the new password
	VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error)
}

type passwordServiceClient struct {
	cc *grpc.ClientConn
}

func NewPasswordServiceClient(cc *grpc.ClientConn) PasswordServiceClient {
	return &passwordServiceClient{cc}
}

func (c *passwordServiceClient) StartResetFlow(ctx context.Context, in *StartResetFlowRequest, opts ...grpc.CallOption) (*StartResetFlowResponse, error) {
	out := new(StartResetFlowResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.password.v1.PasswordService/StartResetFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordServiceClient) VerifyCode(ctx context.Context, in *VerifyCodeRequest, opts ...grpc.CallOption) (*VerifyCodeResponse, error) {
	out := new(VerifyCodeResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.password.v1.PasswordService/VerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServiceServer is the server API for PasswordService service.
type PasswordServiceServer interface {
	// initiate the password reset flow by providing an account identifier,
	// which can be a username, email, or phone number.
	// the account's primary email address will be emailed w/ the reset code.
	StartResetFlow(context.Context, *StartResetFlowRequest) (*StartResetFlowResponse, error)
	// complete the password reset flow by sending the reset code, the account id, and the new password
	VerifyCode(context.Context, *VerifyCodeRequest) (*VerifyCodeResponse, error)
}

func RegisterPasswordServiceServer(s *grpc.Server, srv PasswordServiceServer) {
	s.RegisterService(&_PasswordService_serviceDesc, srv)
}

func _PasswordService_StartResetFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartResetFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).StartResetFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.password.v1.PasswordService/StartResetFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).StartResetFlow(ctx, req.(*StartResetFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordService_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServiceServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.password.v1.PasswordService/VerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServiceServer).VerifyCode(ctx, req.(*VerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alpacalabs.password.v1.PasswordService",
	HandlerType: (*PasswordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartResetFlow",
			Handler:    _PasswordService_StartResetFlow_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _PasswordService_VerifyCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alpacalabs/password/v1/api.proto",
}
